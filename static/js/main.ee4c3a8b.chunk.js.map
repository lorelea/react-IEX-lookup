{"version":3,"sources":["logo.svg","api-config.js","APICall.js","components/IEXInfoLookup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","checkStatus","response","ok","error","Error","statusText","status","handleError","includes","StatusText","APICall","getAllSymbols","fetch","apiConfig","servicesApi","apiToken","then","json","catch","getSymbolInfo","symbol","getLatestPrice","getCompanyInfo","IEXInfoLookup","props","handleSymbolChanged","activeSymbol","setState","state","symbols","price","company","this","description","length","regex","RegExp","symbolInfo","find","item","test","currency","options","map","value","label","className","filterOption","createFilter","ignoreAccents","onChange","payload","renderSymbolInfo","React","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee4c3a8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const dev = {\r\n    \"servicesApi\" : \"https://sandbox.iexapis.com/stable\",\r\n    \"apiToken\"    : \"Tpk_6403cc7fbd5045a6bb679c87df92fb97\"\r\n};\r\nconst prod = {\r\n    \"servicesApi\" : \"https://cloud.iexapis.com/stable\",\r\n    \"apiToken\"    : \"Tpk_6403cc7fbd5045a6bb679c87df92fb97\"\r\n};\r\n\r\nconst config = process.env.NODE_ENV === 'production' ? prod : dev;\r\n\r\nexport default config","import apiConfig from './api-config.js';\r\n\r\nfunction getAllSymbols() {\r\n    return fetch(`${apiConfig.servicesApi}/ref-data/symbols?token=${apiConfig.apiToken}`)\r\n        .then(checkStatus)\r\n        .then(response => response.json())\r\n        .catch(handleError)\r\n}\r\nfunction getSymbolInfo(symbol) {\r\n    return fetch(`${apiConfig.servicesApi}/search/${symbol}?token=${apiConfig.apiToken}`)\r\n        .then(checkStatus)\r\n        .then(response => response.json())\r\n        .catch(handleError)\r\n}\r\nfunction getLatestPrice(symbol) {\r\n    return fetch(`${apiConfig.servicesApi}/stock/${symbol}/price?token=${apiConfig.apiToken}`)\r\n        .then(checkStatus)\r\n        .then(response => response.json())\r\n        .catch(handleError)\r\n}\r\nfunction getCompanyInfo(symbol) {\r\n    return fetch(`${apiConfig.servicesApi}/stock/${symbol}/company?token=${apiConfig.apiToken}`)\r\n        .then(checkStatus)\r\n        .then(response => response.json())\r\n        .catch(handleError)\r\n}\r\n\r\nfunction checkStatus(response) {\r\n    if (response.ok) {\r\n        return response;\r\n    }\r\n    const error = new Error(`HTTP Error ${response.statusText}`);\r\n    error.status = response.statusText;\r\n    error.response = response;\r\n    throw error;\r\n}\r\nfunction handleError(response) {\r\n    if ([401, 403].includes(response.status)) {\r\n        // auth_status=Unauthorized/Forbidden => route to login\r\n    }\r\n\r\n    throw response.StatusText;\r\n}\r\n\r\nconst APICall = { getAllSymbols, getSymbolInfo, getLatestPrice, getCompanyInfo };\r\nexport default APICall;","import React from 'react';\r\nimport './IEXInfoLookup.scss';\r\nimport WindowedSelect, { createFilter } from 'react-windowed-select';\r\n// import Autocomplete from './Autocomplete';\r\nimport APICall from '../APICall';\r\n\r\nclass IEXInfoLookup extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            symbols: [],\r\n            activeSymbol: '',\r\n            price: '',\r\n            company: {}\r\n        };\r\n    }\r\n\r\n    getAllSymbols () {\r\n        APICall.getAllSymbols()\r\n            .then(response => {\r\n                this.setState({\r\n                    symbols: response\r\n                });\r\n            })\r\n    }\r\n\r\n    getLatestPrice () {\r\n        APICall.getLatestPrice(this.state.activeSymbol)\r\n            .then(response => {\r\n                this.setState({\r\n                    price: response\r\n                });\r\n            })\r\n    }\r\n\r\n    getCompanyInfo () {\r\n        APICall.getCompanyInfo(this.state.activeSymbol)\r\n            .then(response => {\r\n                this.setState({\r\n                    company: response\r\n                });\r\n            })\r\n    }\r\n\r\n    handleSymbolChanged = (activeSymbol) => {\r\n        this.setState({ activeSymbol }, () => {\r\n            this.getLatestPrice();\r\n            this.getCompanyInfo();\r\n        });\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getAllSymbols();\r\n    }\r\n\r\n    renderSymbolInfo () {\r\n        let { symbols, activeSymbol, company: { description } } = this.state;\r\n        if (!symbols.length || !activeSymbol) {\r\n            return null;\r\n        }\r\n        const regex = new RegExp(`^${activeSymbol}`, 'i');\r\n        let symbolInfo = symbols.find(item => regex.test(item.symbol));\r\n        if (!symbolInfo) {\r\n            return null;\r\n        }\r\n        return (\r\n            <dl>\r\n                <dt>Symbol</dt>\r\n                <dd>{activeSymbol}</dd>\r\n                <dt>Current Stock Price</dt>\r\n                <dd>{this.state.price} {symbolInfo.currency}</dd>\r\n                <dt>Description</dt>\r\n                <dd>{description}</dd>\r\n            </dl>\r\n        );\r\n    }\r\n\r\n    render () {\r\n        // const items = this.state.symbols.map(item => item.symbol);\r\n        const options = this.state.symbols.map(item => ({ value: item.symbol, label: item.symbol }));\r\n        return (\r\n            <div className=\"my-iex_info_lookup\">\r\n                {/* <Autocomplete\r\n                    items={items}\r\n                    placeholder=\"Start to type...\"\r\n                    onValueUpdated={this.handleSymbolChanged}\r\n                /> */}\r\n                <WindowedSelect\r\n                    className=\"my-iex_info_lookup-autocomplete\"\r\n                    filterOption={createFilter({ ignoreAccents: false })}\r\n                    options={options}\r\n                    value={{ value: this.state.activeSymbol, label: this.state.activeSymbol }}\r\n                    onChange={(payload) => this.handleSymbolChanged(payload.value)}\r\n                />\r\n                {this.renderSymbolInfo()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IEXInfoLookup","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport IEXInfoLookup from './components/IEXInfoLookup'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <main className=\"App-main\">\n        <div className=\"App-component\">\n          <IEXInfoLookup />\n        </div>\n      </main>\n      <footer className=\"App-footer\">\n        <a\n          className=\"App-link\"\n          href=\"https://iexcloud.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Data provided by IEX Cloud\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}